foldr = λf.λi.λl.Y (λr.λl.l (λh.λt.λi.f h (r t)) i) l
map = λf.λl.foldr (λe.λa.cons (f e) a) nil l
concat = λa.λb.foldr cons b a
rcons = λa.λb.concat a (cons b nil)
concatmap = λf.λl.foldr concat nil (map f l)
length = λl.foldr (λe.λa.succ(a)) 0 l
filter = λf.λl.foldr (λe.λa.(f e) (cons e a) a) nil l
reverse = λl.foldr (C rcons) nil l
some = λf.λl.foldr or false (map f l)
all = λf.λl.foldr and true (map f l)
none = λf.λl.(not (some f l))
replicate = λn.λe.Y (λr.λn.(iszero(n) nil (cons e (r (pred n))))) n
find = λp.λl.foldr (λe.λa.(p e) e a) nil l
unfoldr = λf.λi.λt.Y (λr.λx.(t x) nil (cons x (r (f x)))) i
iota = λn.unfoldr succ 0 (eq n)
mapiota = λf.λn.map f (iota n)

unit = λx.(cons x nil)
dip = λx.λl.(nth 0 l) x
rep = λl.(nth 0 l) (nth 0 l)
run = λl.(nth 0 l) l
sap = λa.λb.(nth 0 b) (nth 0 a)
